name: Generate Slideshow from PDF URL or Local Folder

on:
  workflow_dispatch:
    inputs:
      pdfUrl:
        description: 'URL of the PDF file to convert (laisser vide si traitement local)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'pdf/**.pdf'
      - '.github/workflows/pdf-slideshow.yml'
      # Surveille maintenant le script unifié et le script d'index
      - '.github/scripts/process_pdf.sh'
      - '.github/scripts/generate_main_index.sh'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build PDF Slideshow(s)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone Reveal.js
        uses: actions/checkout@v4
        with:
          repository: hakimel/reveal.js
          path: reveal.js

      # --- Configuration du Cache ---
      - name: Configure Cache Path
        id: cache-path
        run: echo "path=build" >> $GITHUB_OUTPUT

      - name: Restore Build Cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.cache-path.outputs.path }}
          # Clé basée aussi sur le hash du script unifié
          key: ${{ runner.os }}-build-${{ hashFiles('.github/scripts/process_pdf.sh', '.github/scripts/generate_main_index.sh') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils pngquant curl coreutils findutils

      # Rendre les scripts (actuels) exécutables
      - name: Make scripts executable
        run: chmod +x .github/scripts/process_pdf.sh .github/scripts/generate_main_index.sh

      - name: Prepare Build Directory and Copy Assets
        run: |
          mkdir -p build/dist build/plugin
          cp -r reveal.js/dist/* build/dist/
          cp -r reveal.js/plugin/* build/plugin/
          echo "Build directory structure created/ensured and Reveal.js assets copied."

      # === Logique conditionnelle de traitement avec le script unifié ===

      # Cas 1: Traitement d'une URL via workflow_dispatch
      - name: Process PDF URL (if specified)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pdfUrl != ''
        # Appel du script unifié avec l'option -u
        run: .github/scripts/process_pdf.sh -u "${{ github.event.inputs.pdfUrl }}" -b "build"

      # Cas 2: Traitement des fichiers locaux du dossier pdf/ sur push
      - name: Process Local PDF Files (on push)
        if: github.event_name == 'push'
        run: |
          PDF_DIR="pdf"
          BUILD_DIR="build"
          shopt -s nullglob
          files=("$PDF_DIR"/*.pdf)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No PDF files found in $PDF_DIR. Nothing to process."
          else
            echo "Found ${#files[@]} PDF file(s) in $PDF_DIR. Processing..."
            for pdf_file in "${files[@]}"; do
              echo "--- Processing '$pdf_file' ---"
              # Appel du script unifié avec l'option -f
              .github/scripts/process_pdf.sh -f "$pdf_file" -b "$BUILD_DIR"
              echo "--- Finished '$pdf_file' ---"
            done
          fi

      # === Fin de la logique conditionnelle ===

      # Générer l'index principal
      - name: Generate Main Index HTML
        run: .github/scripts/generate_main_index.sh "build"

      # --- Sauvegarde du Cache ---
      - name: Save Build Cache
        uses: actions/cache/save@v4
        # if: steps.cache-restore.outputs.cache-hit != 'true' # Optionnel: Sauver seulement si modifié
        with:
          path: ${{ steps.cache-path.outputs.path }}
          # Utilise la clé primaire restaurée ou la clé actuelle si nouvelle
          key: ${{ steps.cache-restore.outputs.cache-primary-key || format('{0}-build-{1}', runner.os, hashFiles('.github/scripts/process_pdf.sh', '.github/scripts/generate_main_index.sh')) }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
