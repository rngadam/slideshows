name: Generate Slideshow from PDF (using Docker)

on:
  workflow_dispatch:
    inputs:
      pdfUrl:
        description: 'URL of the PDF file to convert (laisser vide si traitement local)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'pdf/**.pdf'
      - '.github/workflows/pdf-slideshow.yml'
      - '.github/scripts/**.sh' # Surveille tous les scripts
      - 'Dockerfile' # Se redéclenche si Dockerfile change

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build_and_deploy: # Un seul job pour tout faire
    name: Build PDF Slideshow(s) and Deploy
    runs-on: ubuntu-latest

    # Utilise le conteneur Docker défini dans env
    container:
      image: ghcr.io/${{ github.repository }}:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone Reveal.js
        uses: actions/checkout@v4
        with:
          repository: hakimel/reveal.js
          path: reveal.js # Sera dans /github/workspace/reveal.js

      # --- Configuration du Cache ---
      - name: Configure Cache Path
        id: cache-path
        run: echo "path=build" >> $GITHUB_OUTPUT # Dans /github/workspace

      - name: Restore Build Cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.cache-path.outputs.path }}
          # Clé basée sur le hash des scripts (car ils sont DANS l'image)
          # et le Dockerfile lui-même. Si l'un change, l'image change -> le cache est moins pertinent
          # mais on peut garder une clé basée sur le runner pour une restauration partielle.
          key: ${{ runner.os }}-build-cache-v2-${{ hashFiles('.github/scripts/**', 'Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-v2-

      # Préparer le dossier build et copier les assets (même si cache restauré)
      - name: Prepare Build Directory and Copy Assets
        run: |
          mkdir -p build/dist build/plugin
          cp -r reveal.js/dist/* build/dist/
          cp -r reveal.js/plugin/* build/plugin/
          echo "Build directory structure created/ensured and Reveal.js assets copied."
        shell: bash # Utilise bash explicitement

      # Étape 1: Préparer la matrice des PDFs à traiter
      - name: Prepare PDF Processing Matrix
        id: prep_matrix
        # Exécute le script DANS le conteneur
        # Passe les inputs du workflow comme variables d'environnement
        run: /app/scripts/prepare_matrix.sh
        shell: bash # Utilise bash pour shopt dans le script
        env:
          # Transmet les infos nécessaires au script via l'environnement
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_PDFURL: ${{ github.event.inputs.pdfUrl }}

      # Étape 2: Traiter les PDFs listés dans la matrice
      - name: Process PDFs from Matrix Data
        # S'exécute seulement s'il y a des PDFs trouvés par l'étape précédente
        if: steps.prep_matrix.outputs.found_pdfs == 'true'
        # Exécute le script DANS le conteneur
        # Passe la matrice compactée et le dossier build en arguments
        run: /app/scripts/process_matrix_items.sh '${{ steps.prep_matrix.outputs.matrix }}' 'build'
        shell: bash # Utilise bash

      # Étape 3: Générer l'index principal
      - name: Generate Main Index HTML
        if: steps.prep_matrix.outputs.found_pdfs == 'true'
        # Exécute le script DANS le conteneur
        run: /app/scripts/generate_main_index.sh "build"
        shell: bash # Utilise bash

      # --- Sauvegarde du Cache ---
      - name: Save Build Cache
        if: steps.prep_matrix.outputs.found_pdfs == 'true'
        uses: actions/cache/save@v4
        # Sauvegarde toujours pour simplifier (si rien n'a changé, le cache sera identique)
        with:
          path: ${{ steps.cache-path.outputs.path }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key || format('{0}-build-cache-v2-{1}', runner.os, hashFiles('.github/scripts/**', 'Dockerfile')) }}

      # Étape 4: Upload de l'artefact pour Pages
      - name: Upload artifact for Pages
        if: steps.prep_matrix.outputs.found_pdfs == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build # Chemin relatif à /github/workspace

  # Job pour le déploiement (inchangé, dépend du job précédent)
  deploy:
    needs: build_and_deploy # Doit dépendre du job qui génère l'artefact
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

