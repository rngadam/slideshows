name: Generate Slideshow from PDF (using Docker)

on:
  workflow_dispatch:
    inputs:
      pdfUrl:
        description: 'URL of the PDF file to convert'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'pdf/**.pdf'
      # Ne se déclenche plus sur changement de scripts/workflow ici, géré par docker-build
      # - '.github/workflows/pdf-slideshow.yml'
      # - '.github/scripts/**.sh'

permissions:
  contents: read
  pages: write
  id-token: write

# Définit le nom de l'image Docker à utiliser
# REMPLACEZ <votre-user-ou-orga>/<votre-repo> par les bonnes valeurs
env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest

jobs:
  build:
    name: Build PDF Slideshow(s) inside Docker
    runs-on: ubuntu-latest

    # === Utilisation du conteneur Docker ===
    container:
      image: ${{ env.DOCKER_IMAGE }}
      # Les volumes sont généralement gérés automatiquement pour l'espace de travail
      # options: --user root # Si des problèmes de permission surviennent

    steps:
      # Le checkout se fait maintenant dans l'environnement du conteneur (/github/workspace)
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Pas besoin de fetch-depth ici à moins d'un besoin spécifique

      # Le clonage de Reveal.js se fait aussi dans le conteneur
      - name: Clone Reveal.js
        uses: actions/checkout@v4
        with:
          repository: hakimel/reveal.js
          path: reveal.js # Sera dans /github/workspace/reveal.js

      # --- Configuration du Cache (chemin relatif à l'espace de travail) ---
      - name: Configure Cache Path
        id: cache-path
        # Le dossier build sera créé dans l'espace de travail du conteneur
        run: echo "path=build" >> $GITHUB_OUTPUT

      - name: Restore Build Cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.cache-path.outputs.path }}
          # La clé peut rester basée sur les scripts *source* ou être simplifiée
          # car une nouvelle image invalidera implicitement. Simplifions :
          key: ${{ runner.os }}-build-cache-v1 # Clé plus simple
          restore-keys: |
            ${{ runner.os }}-build-cache-

      # PAS BESOIN d'installer les dépendances ici !

      # PAS BESOIN de chmod ici (fait dans Dockerfile) !

      - name: Prepare Build Directory and Copy Assets
        # Les chemins sont relatifs à l'espace de travail /github/workspace
        run: |
          mkdir -p build/dist build/plugin
          # Copie depuis reveal.js cloné dans l'espace de travail
          cp -r reveal.js/dist/* build/dist/
          cp -r reveal.js/plugin/* build/plugin/
          echo "Build directory structure created/ensured and Reveal.js assets copied."

      # === Logique conditionnelle de traitement ===
      # Les scripts sont maintenant appelés depuis leur chemin DANS le conteneur

      - name: Process PDF URL (if specified)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pdfUrl != ''
        # Chemin vers le script dans l'image, build dir dans l'espace de travail
        run: /app/scripts/process_pdf.sh -u "${{ github.event.inputs.pdfUrl }}" -b "build"

      - name: Process Local PDF Files (on push)
        if: github.event_name == 'push'
        run: |
          PDF_DIR="pdf" # Relatif à /github/workspace
          BUILD_DIR="build" # Relatif à /github/workspace
          shopt -s nullglob
          # Cherche les PDF dans l'espace de travail checkouté
          files=("$PDF_DIR"/*.pdf)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No PDF files found in $PDF_DIR. Nothing to process."
          else
            echo "Found ${#files[@]} PDF file(s) in $PDF_DIR. Processing..."
            for pdf_file in "${files[@]}"; do
              echo "--- Processing '$pdf_file' ---"
              # Appel avec chemin dans l'image, fichier/build dir dans l'espace de travail
              /app/scripts/process_pdf.sh -f "$pdf_file" -b "$BUILD_DIR"
              echo "--- Finished '$pdf_file' ---"
            done
          fi

      # === Fin de la logique conditionnelle ===

      # Générer l'index principal (utilise le script dans l'image)
      - name: Generate Main Index HTML
        run: /app/scripts/generate_main_index.sh "build" # build dir dans l'espace de travail

      # --- Sauvegarde du Cache ---
      - name: Save Build Cache
        uses: actions/cache/save@v4
        # if: steps.cache-restore.outputs.cache-hit != 'true' # Optionnel
        with:
          path: ${{ steps.cache-path.outputs.path }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key || format('{0}-build-cache-v1', runner.os) }}

      # L'upload prend le dossier build de l'espace de travail
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  # Le job de déploiement reste inchangé
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
