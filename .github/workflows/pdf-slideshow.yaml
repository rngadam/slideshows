name: Generate Slideshow from PDF URL or Local Folder

on:
  # Option 1: Déclenchement manuel avec une URL
  workflow_dispatch:
    inputs:
      pdfUrl:
        description: 'URL of the PDF file to convert (laisser vide si traitement local)'
        required: false # Non requis si on veut juste déclencher pour le local via l'UI (mais pas standard)
        type: string

  # Option 2: Déclenchement sur push dans le dossier pdf/
  push:
    branches:
      - main # Ou votre branche par défaut
    paths:
      - 'pdf/**.pdf' # Surveille les fichiers PDF dans le dossier pdf/
      - '.github/workflows/pdf-slideshow.yml' # Se redéclenche si le workflow change
      - '.github/scripts/**.sh' # Se redéclenche si les scripts changent

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build PDF Slideshow(s)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Fetch all history so Scripts Changed step works correctly
        with:
          fetch-depth: 0

      - name: Clone Reveal.js
        uses: actions/checkout@v4
        with:
          repository: hakimel/reveal.js
          path: reveal.js

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils pngquant curl coreutils findutils

      # Rendre TOUS les scripts exécutables
      - name: Make scripts executable
        run: chmod +x .github/scripts/*.sh

      - name: Prepare Build Directory and Copy Assets
        run: |
          mkdir -p build/dist build/plugin
          cp -r reveal.js/dist/* build/dist/
          cp -r reveal.js/plugin/* build/plugin/
          echo "Build directory structure created and Reveal.js assets copied."

      # === Logique conditionnelle ===

      # Cas 1: Traitement d'une URL via workflow_dispatch
      - name: Process PDF URL (if specified)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pdfUrl != ''
        run: .github/scripts/process_pdf_url.sh "${{ github.event.inputs.pdfUrl }}" "build"

      # Cas 2: Traitement des fichiers locaux du dossier pdf/ sur push
      # Note: Ceci traitera TOUS les PDF dans pdf/ à chaque push pertinent.
      - name: Process Local PDF Files (on push)
        if: github.event_name == 'push'
        run: |
          PDF_DIR="pdf" # Nom du dossier contenant les PDFs locaux
          BUILD_DIR="build"
          shopt -s nullglob # Empêche l'erreur si aucun fichier .pdf n'est trouvé
          files=("$PDF_DIR"/*.pdf)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No PDF files found in $PDF_DIR. Nothing to process."
          else
            echo "Found ${#files[@]} PDF file(s) in $PDF_DIR. Processing..."
            for pdf_file in "${files[@]}"; do
              echo "--- Processing $pdf_file ---"
              # Appelle le script pour chaque fichier PDF local trouvé
              .github/scripts/process_local_pdf.sh "$pdf_file" "$BUILD_DIR"
              echo "--- Finished $pdf_file ---"
            done
          fi

      # Note: Si déclenché par workflow_dispatch SANS URL, aucun des deux blocs précédents ne s'exécute.
      # On pourrait ajouter un 3ème cas pour traiter le local si dispatch + URL vide, mais c'est moins intuitif.

      # === Fin de la logique conditionnelle ===

      # Générer l'index principal DANS TOUS LES CAS (après traitement URL ou local)
      - name: Generate Main Index HTML
        run: .github/scripts/generate_main_index.sh "build"

      # Télécharger l'artefact pour GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
